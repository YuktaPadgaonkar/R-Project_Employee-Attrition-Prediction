splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.7,0.3))
train <- df[splitting==1,]
test <- df[splitting==2,]
rf_fit <- randomForest(Attrition ~ ., data=train)
#print(rf_fit)
#saveRDS(rf_fit, "model.rds")
result<-predict(rf_fit,newdata=test,type='response')
vtab<-table(test[,1],result>0.5)
confusionMatrix(vtab)
library(tidyverse)
library(randomForest)
library(caret)
# importing dataset
df<-read_csv("empf.csv")
# to view dataset -> view(df)
# to get structure of dataset -> str(df)
# splitting dataset in the ratio 7:3
# 7 parts as training data and 3 parts as testing data
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.7,0.3))
train <- df[splitting==1,]
test <- df[splitting==2,]
rf_fit <- randomForest(Attrition ~ ., data=train)
#print(rf_fit)
#saveRDS(rf_fit, "model.rds")
#result<-predict(rf_fit,newdata=test,type='response')
#table(test[,1],result>0.5)
ypred = predict(rf_fit, type = 'response', newdata = test)
#print(rf_fit)
#saveRDS(rf_fit, "model.rds")
#result<-predict(rf_fit,newdata=test,type='response')
#table(test[,1],result>0.5)
confusionMatrix(factor(ypred,levels = min(test):max(test)),factor(test,levels = min(test):max(test)))
try = ifelse(ypred > 0.5, 1, 0)
#print(rf_fit)
#saveRDS(rf_fit, "model.rds")
#result<-predict(rf_fit,newdata=test,type='response')
#table(test[,1],result>0.5)
confusionMatrix(factor(try,levels = min(test):max(test)),factor(test,levels = min(test):max(test)))
ypred = predict(rf_fit, type = 'response', newdata = test[-1])
library(tidyverse)
library(randomForest)
library(caret)
# importing dataset
df<-read_csv("empf.csv")
# to view dataset -> view(df)
# to get structure of dataset -> str(df)
# splitting dataset in the ratio 7:3
# 7 parts as training data and 3 parts as testing data
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.7,0.3))
train <- df[splitting==1,]
test <- df[splitting==2,]
rf_fit <- randomForest(Attrition ~ ., data=train)
ypred = predict(rf_fit, type = 'response', newdata = test[-1])
try = ifelse(ypred > 0.5, 1, 0)
#print(rf_fit)
#saveRDS(rf_fit, "model.rds")
#result<-predict(rf_fit,newdata=test,type='response')
#table(test[,1],result>0.5)
confusionMatrix(factor(try,levels = min(test):max(test)),factor(test,levels = min(test):max(test)))
library(tidyverse)
library(randomForest)
library(caret)
# importing dataset
df<-read_csv("empf.csv")
# to view dataset -> view(df)
# to get structure of dataset -> str(df)
# splitting dataset in the ratio 7:3
# 7 parts as training data and 3 parts as testing data
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.7,0.3))
train <- df[splitting==1,]
test <- df[splitting==2,]
rf_fit <- randomForest(Attrition ~ ., data=train)
#print(rf_fit)
#saveRDS(rf_fit, "model.rds")
result<-predict(rf_fit,newdata=test,type='response')
table(test$Attrition,result>0.5)
cm<-table(test$Attrition,result>0.5)
confusionMatrix(cm)
confusionMatrix(factor(cm))
library(tidyverse)
library(randomForest)
library(caret)
# importing dataset
df<-read_csv("empf.csv")
# to view dataset -> view(df)
# to get structure of dataset -> str(df)
# splitting dataset in the ratio 7:3
# 7 parts as training data and 3 parts as testing data
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.7,0.3))
train <- df[splitting==1,]
test <- df[splitting==2,]
rf_fit <- randomForest(Attrition ~ ., data=train)
#print(rf_fit)
#saveRDS(rf_fit, "model.rds")
result<-predict(rf_fit,newdata=test,type='response')
cm<-table(test$Attrition,result>0.5)
library(tidyverse)
library(randomForest)
library(caret)
# importing dataset
df<-read_csv("empf.csv")
# to view dataset -> view(df)
# to get structure of dataset -> str(df)
# splitting dataset in the ratio 7:3
# 7 parts as training data and 3 parts as testing data
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.7,0.3))
train <- df[splitting==1,]
test <- df[splitting==2,]
rf_fit <- randomForest(Attrition ~ ., data=train)
#print(rf_fit)
#saveRDS(rf_fit, "model.rds")
result<-predict(rf_fit,newdata=test,type='response')
table(test$Attrition,result>0.5)
result
t1<-ifelse(result > 0.5, 1, 0)
t1
test
test[2]
v<-confusionMatrix(test[2],t1)
str(test[2])
str(t1)
t(test[2])
t2<-t(test[2])
v<-confusionMatrix(t2,t1)
nrow(t2)
ncol(t2)
nrow(t1)
type(t1)
typeof(t1)
typeof(t2)
class(t1)
class(t2)
c<-table(test$Attrition,t1)
confusionMatrix(a)
tf<-as.numeric(t2)
tf
class(t1)
class(t2)
class(tf)
confusionMatrix(c)
library(tidyverse)
library(randomForest)
library(caret)
# importing dataset
df<-read_csv("empf.csv")
# to view dataset -> view(df)
# to get structure of dataset -> str(df)
# splitting dataset in the ratio 7:3
# 7 parts as training data and 3 parts as testing data
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.7,0.3))
train <- df[splitting==1,]
test <- df[splitting==2,]
rf_fit <- randomForest(Attrition ~ ., data=train)
#print(rf_fit)
#saveRDS(rf_fit, "model.rds")
result<-predict(rf_fit,newdata=test,type='response')
t1<-ifelse(result > 0.5, 1, 0)
c<-table(test$Attrition,t1)
confusionMatrix(c)
library(tidyverse)
library(randomForest)
library(caret)
# importing dataset
df<-read_csv("empf.csv")
# to view dataset -> view(df)
# to get structure of dataset -> str(df)
# splitting dataset in the ratio 7:3
# 7 parts as training data and 3 parts as testing data
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.7,0.3))
train <- df[splitting==1,]
test <- df[splitting==2,]
rf_fit <- randomForest(Attrition ~ ., data=train)
#print(rf_fit)
#saveRDS(rf_fit, "model.rds")
result<-predict(rf_fit,newdata=test,type='response')
t1<-ifelse(result > 0.5, 1, 0)
c<-table(test$Attrition,t1)
confusionMatrix(c)
library(tidyverse)
library(randomForest)
library(caret)
# importing dataset
df<-read_csv("empf.csv")
# to view dataset -> view(df)
# to get structure of dataset -> str(df)
# splitting dataset in the ratio 7:3
# 7 parts as training data and 3 parts as testing data
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.7,0.3))
train <- df[splitting==1,]
test <- df[splitting==2,]
rf_fit <- randomForest(Attrition ~ ., data=train)
#print(rf_fit)
#saveRDS(rf_fit, "model.rds")
result<-predict(rf_fit,newdata=test,type='response')
t1<-ifelse(result > 0.5, 1, 0)
c<-table(test$Attrition,t1)
confusionMatrix(c)
library(tidyverse)
library(randomForest)
library(caret)
# importing dataset
df<-read_csv("C:/Users/lenovo/Desktop/try/empf.csv")
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.7,0.3))
train <- df[splitting==1,]
test <- df[splitting==2,]
rf_fit <- randomForest(Attrition ~ ., data=train)
#print(rf_fit)
#saveRDS(rf_fit, "model.rds")
result<-predict(rf_fit,newdata=test,type='response')
t1<-ifelse(result > 0.5, 1, 0)
c<-table(test$Attrition,t1)
confusionMatrix(c)
library(party)
library(tidyverse)
library(randomForest)
library(caret)
# importing dataset
df<-read_csv("C:/Users/lenovo/Desktop/try/empf.csv")
# to view dataset -> view(df)
# to get structure of dataset -> str(df)
# splitting dataset in the ratio 7:3
# 7 parts as training data and 3 parts as testing data
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.7,0.3))
train <- df[splitting==1,]
test <- df[splitting==2,]
rf_fit <- randomForest(Attrition ~ ., data=train)
c_fit<-ctree(Attrition ~ ., data=train)
#print(rf_fit)
#saveRDS(rf_fit, "model.rds")
result<-predict(rf_fit,newdata=test,type='response')
result1<-predict(c_fit,newdata=test,type='response')
t1<-ifelse(result > 0.5, 1, 0)
t2<-ifelse(result1 > 0.5, 1, 0)
c<-table(test$Attrition,t1)
confusionMatrix(c)
d<-table(test$Attrition,t2)
confusionMatrix(d)
df<-read_csv("C:/Users/lenovo/Desktop/try/empf.csv")
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.7,0.3))
training_set <- df[splitting==1,]
test_set <- df[splitting==2,]
lg19 = glm(formula = Attrition ~ Age+ EnvironmentSatisfaction+ JobLevel+ MaritalStatus+ MonthlyIncome+ OverTime,StockOptionLevel+ TotalWorkingYears+ YearsAtCompany+ YearsInCurrentRole+ YearsWithCurrManager ,family = binomial,data =training_set)
#saveRDS(lg19,"C:/Users/lenovo/Desktop/try/model.rds")
resultf<-predict(lg19, type = 'response', newdata = test_set)
tf<-ifelse(resultf > 0.5, 1, 0)
final<-table(test$Attrition,tf)
confusionMatrix(final)
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.7,0.3))
training_set <- df[splitting==1,]
test_set <- df[splitting==2,]
lg19 = glm(formula = Attrition ~ Age+ EnvironmentSatisfaction+ JobLevel+ MaritalStatus+ MonthlyIncome+ OverTime,StockOptionLevel+ TotalWorkingYears+ YearsAtCompany+ YearsInCurrentRole+ YearsWithCurrManager ,family = binomial,data =training_set)
#saveRDS(lg19,"C:/Users/lenovo/Desktop/try/model.rds")
resultf<-predict(lg19, type = 'response', newdata = test_set)
tf<-ifelse(resultf > 0.5, 1, 0)
final<-table(test$Attrition,tf)
confusionMatrix(final)
library(tidyverse)
library(randomForest)
library(caret)
# importing dataset
df<-read_csv("C:/Users/lenovo/Desktop/try/empf.csv")
# to view dataset -> view(df)
# to get structure of dataset -> str(df)
# splitting dataset in the ratio 7:3
# 7 parts as training data and 3 parts as testing data
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.7,0.3))
train <- df[splitting==1,]
test <- df[splitting==2,]
rf_fit <- randomForest(Attrition ~ ., data=train)
c_fit<-ctree(Attrition ~ ., data=train)
l_fit<-glm(Attrition ~ ., data=train)
#print(rf_fit)
#saveRDS(rf_fit, "model.rds")
result<-predict(rf_fit,newdata=test,type='response')
result1<-predict(c_fit,newdata=test,type='response')
resultf<-predict(l_fit,newdata=test,type='response')
t1<-ifelse(result > 0.5, 1, 0)
t2<-ifelse(result1 > 0.5, 1, 0)
tf<-ifelse(resultf > 0.5, 1, 0)
c<-table(test$Attrition,t1)
confusionMatrix(c)
d<-table(test$Attrition,t2)
confusionMatrix(d)
f<-table(test$Attrition,tf)
confusionMatrix(f)
runApp('C:/Users/lenovo/Desktop/try/ui.R')
saveRDS(rf_fit,"C:/Users/lenovo/Desktop/try/modef.rds")
runApp('C:/Users/lenovo/Desktop/try/ui.R')
runApp('C:/Users/lenovo/Desktop/try/ui.R')
df<-read_csv("C:/Users/lenovo/Desktop/try/empf.csv")
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.7,0.3))
training_set <- df[splitting==1,]
test_set <- df[splitting==2,]
lg19 = glm(formula = Attrition ~ Age+ EnvironmentSatisfaction+ JobLevel+ MaritalStatus+ MonthlyIncome+ OverTime,StockOptionLevel+ TotalWorkingYears+ YearsAtCompany+ YearsInCurrentRole+ YearsWithCurrManager ,family = binomial,data =training_set)
#saveRDS(lg19,"C:/Users/lenovo/Desktop/try/model.rds")
resultf<-predict(lg19, type = 'response', newdata = test_set)
tf<-ifelse(resultf > 0.5, 1, 0)
final<-table(test$Attrition,tf)
confusionMatrix(final)
df<-read_csv("C:/Users/lenovo/Desktop/try/empf.csv")
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.7,0.3))
training_set <- df[splitting==1,]
test_set <- df[splitting==2,]
lg19 = glm(formula = Attrition ~ Age+ EnvironmentSatisfaction+ JobLevel+ MaritalStatus+ MonthlyIncome+ OverTime,StockOptionLevel+ TotalWorkingYears+ YearsAtCompany+ YearsInCurrentRole+ YearsWithCurrManager ,family = binomial,data =training_set)
saveRDS(lg19,"C:/Users/lenovo/Desktop/try/model.rds")
resultf<-predict(lg19, type = 'response', newdata = test_set)
tf<-ifelse(resultf > 0.5, 1, 0)
final<-table(test$Attrition,tf)
confusionMatrix(final)
df<-read_csv("C:/Users/lenovo/Desktop/try/empf.csv")
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.7,0.3))
training_set <- df[splitting==1,]
test_set <- df[splitting==2,]
lg19 = glm(formula = Attrition ~ Age+ EnvironmentSatisfaction+ JobLevel+ MaritalStatus+ MonthlyIncome+ OverTime,StockOptionLevel+ TotalWorkingYears+ YearsAtCompany+ YearsInCurrentRole+ YearsWithCurrManager ,family = binomial,data =training_set)
saveRDS(lg19,"C:/Users/lenovo/Desktop/try/model.rds")
resultf<-predict(lg19, type = 'response', newdata = test_set)
tf<-ifelse(resultf > 0.5, 1, 0)
final<-table(test_set$Attrition,tf)
confusionMatrix(final)
runApp('C:/Users/lenovo/Desktop/try/ui.R')
runApp('C:/Users/lenovo/Desktop/try/ui.R')
runApp('C:/Users/lenovo/Desktop/try/ui.R')
saveRDS(rf_fit,"C:/Users/lenovo/Desktop/try/modeft.rds")
library(tidyverse)
library(randomForest)
library(caret)
# importing dataset
df<-read_csv("C:/Users/lenovo/Desktop/try/empf.csv")
# to view dataset -> view(df)
# to get structure of dataset -> str(df)
# splitting dataset in the ratio 7:3
# 7 parts as training data and 3 parts as testing data
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.7,0.3))
train <- df[splitting==1,]
test <- df[splitting==2,]
rf_fit <- randomForest(Attrition ~ ., data=train)
c_fit<-ctree(Attrition ~ ., data=train)
l_fit<-glm(Attrition ~ ., data=train)
#print(rf_fit)
#saveRDS(rf_fit, "model.rds")
result<-predict(rf_fit,newdata=test,type='response')
result1<-predict(c_fit,newdata=test,type='response')
resultf<-predict(l_fit,newdata=test,type='response')
t1<-ifelse(result > 0.5, 1, 0)
t2<-ifelse(result1 > 0.5, 1, 0)
tf<-ifelse(resultf > 0.5, 1, 0)
c<-table(test$Attrition,t1)
confusionMatrix(c)
d<-table(test$Attrition,t2)
confusionMatrix(d)
f<-table(test$Attrition,tf)
confusionMatrix(f)
saveRDS(rf_fit,"C:/Users/lenovo/Desktop/try/modeft.rds")
runApp('C:/Users/lenovo/Desktop/try/ui.R')
runApp('C:/Users/lenovo/Desktop/try/ui.R')
install.packages("e1071")
library(e1071)
n_fit<-naiveBayes(Attrition~.,data = train)
resultn<-predict(n_fit,newdata=test,type='response')
resultn<-predict(n_fit,newdata=test)
n<-table(test$Attrition,resultn)
confusionMatrix(n)
library(caret)
library(caTools)
library(shiny)
library(tidyverse)
n<-table(test$Attrition,resultn)
confusionMatrix(n)
tn<-ifelse(resultn > 0.5,1,0)
runApp('C:/Users/lenovo/Desktop/try/ui.R')
#Printing Confusion Matrix for all the models
print("The confusion Matrix of Random Forest is : ")
c<-table(test$Attrition,t1)
confusionMatrix(c)
c<-table(test$Attrition,t1)
confusionMatrix(c)
print("The confusion Matrix of Random Forest is : ")
c<-table(test$Attrition,t1)
print("The confusion Matrix of Random Forest is : ")
confusionMatrix(c)
d<-table(test$Attrition,t2)
print("The confusion Matrix of Decision Tree is : ")
confusionMatrix(d)# Accuracy of Decision Tree : 83.05%
d<-table(test$Attrition,t2)
print("The confusion Matrix of Decision Tree is : ")
confusionMatrix(d)# Accuracy of Decision Tree : 81.36%
n<-table(test$Attrition,resultn)
print("The confusion Matrix of Naive Bayes is : ")
confusionMatrix(n)# Accuracy of Naive Bayes  : 81.36%
n<-table(test$Attrition,resultn)
print("The confusion Matrix of Naive Bayes is : ")
confusionMatrix(n)# Accuracy of Naive Bayes  : 80.63%
print("Confusion matrix for Logistic Regression : ")
confusionMatrix(xtab2)
runApp('C:/Users/lenovo/Desktop/try/ui.R')
library(tidyverse)
library(randomForest)
library(caret)
# importing dataset
df<-read_csv("D:\\SEM8\\R Programming\\R Project\\RPROJECT\\try\\try\\empf.csv")
# to view dataset -> view(df)
# to get structure of dataset -> str(df)
# splitting dataset in the ratio 7:3
# 7 parts as training data and 3 parts as testing data
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.7,0.3))
train <- df[splitting==1,]
test <- df[splitting==2,]
#Model building using Random Forest
rf_fit <- randomForest(Attrition ~ ., data=train)
#Model building using Decision Tree
c_fit<-ctree(Attrition ~ ., data=train)
#Model building using Logistic Regression
l_fit<-glm(Attrition ~ ., data=train)
#Model building using Naive Bayes
n_fit<-naiveBayes(Attrition~.,data = train)
#Predicting value  for test set for all the implemented Algorithms
result<-predict(rf_fit,newdata=test,type='response')
result1<-predict(c_fit,newdata=test,type='response')
resultf<-predict(l_fit,newdata=test,type='response')
resultn<-predict(n_fit,newdata=test)
t1<-ifelse(result > 0.5, 1, 0)
t2<-ifelse(result1 > 0.5, 1, 0)
tf<-ifelse(resultf > 0.5, 1, 0)
#Printing Confusion Matrix for all the models
c<-table(test$Attrition,t1)
print("The confusion Matrix of Random Forest is : ")
confusionMatrix(c)# Accuracy of Random Forest : 83.05%
d<-table(test$Attrition,t2)
print("The confusion Matrix of Decision Tree is : ")
confusionMatrix(d)# Accuracy of Decision Tree : 81.36%
f<-table(test$Attrition,tf)
print("The confusion Matrix of Logistic Regression is : ")
confusionMatrix(f)
n<-table(test$Attrition,resultn)
print("The confusion Matrix of Naive Bayes is : ")
confusionMatrix(n)# Accuracy of Naive Bayes  : 80.63%
#Saving Random Forest model
#saveRDS(rf_fit,"C:/Users/lenovo/Desktop/try/modeft.rds")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages(randomForest)
install.packages("randomForest")
library(randomForest)
install.packages("caret")
library(caret)
install.packages("randomForest")
library(randomForest)
# importing dataset
df<-read_csv("D:\\SEM8\\R Programming\\R Project\\RPROJECT\\try\\try\\empf.csv")
# splitting dataset in the ratio 7:3
# 7 parts as training data and 3 parts as testing data
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.7,0.3))
train <- df[splitting==1,]
test <- df[splitting==2,]
#Model building using Random Forest
rf_fit <- randomForest(Attrition ~ ., data=train)
install.packages("randomForest")
df<-read_csv("D:\\SEM8\\R Programming\\R Project\\RPROJECT\\try\\try\\empf.csv")
df<-read.csv("D:\\SEM8\\R Programming\\R Project\\RPROJECT\\try\\try\\empf.csv")
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.7,0.3))
training_set <- df[splitting==1,]
test_set <- df[splitting==2,]
#Model building using Logistic Regression
lg19 = glm(formula = Attrition ~ Age+ EnvironmentSatisfaction+ JobLevel+ MaritalStatus+ MonthlyIncome+ OverTime,StockOptionLevel+ TotalWorkingYears+ YearsAtCompany+ YearsInCurrentRole+ YearsWithCurrManager ,family = binomial,data =training_set)
getwd()
#Import Data
df=read.csv(file.choose(),stringsAsFactors = T)
#Check for missing values
anyNA(df)
str(df)
df$Age<-df$ï..Age
df$ï..Age<-NULL
table(df$Over18)
table(df$StandardHours)
str(df)
df$EmployeeCount<-NULL
df$EmployeeNumber<-NULL
df$Over18<-NULL
df$StandardHours<-NULL
str(df)
nrow(df)
ncol(df)
typeof(df$OverTime)
df$Attrition = factor(df$Attrition,
levels = c('No', 'Yes'),
labels = c(0, 1))
str(df)
table(df$BusinessTravel)
df$BusinessTravel <- factor(as.character(as.numeric(df$BusinessTravel)))
df$Department <- factor(as.character(as.numeric(df$Department)))
df$EducationField <- factor(as.character(as.numeric(df$EducationField)))
df$Gender <- factor(as.character(as.numeric(df$Gender)))
df$JobRole <- factor(as.character(as.numeric(df$JobRole)))
df$MaritalStatus <- factor(as.character(as.numeric(df$MaritalStatus)))
df$OverTime <- factor(as.character(as.numeric(df$OverTime)))
str(df)
# Splitting the dataset into the Training set and Test set
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(df$Attrition, SplitRatio = 0.75)
training_set = subset(df, split == TRUE)
test_set = subset(df, split == FALSE)
str(training_set)
classifier = glm(formula = Attrition ~ .,family = binomial,data = training_set)
# Predicting the Test set results
prob_pred = predict(classifier, type = 'response', newdata = test_set[-1])
y_pred = ifelse(prob_pred > 0.5, 1, 0)
# Making the Confusion Matrix
xtab<-table(test_set[, 1], y_pred)
library(caret)
